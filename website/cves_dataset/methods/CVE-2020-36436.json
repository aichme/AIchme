{"description": "Affected versions of this crate unconditionally implemented `Send` & `Sync` for types `PinSlab<T>` & `Unordered<T, S>`. This allows sending non-Send types to other threads and concurrently accessing non-Sync types from multiple threads.\n\nThis can result in a data race & memory corruption when types that provide internal mutability without synchronization are contained within `PinSlab<T>` or `Unordered<T, S>` and accessed concurrently from multiple threads.\n\nThe flaw was corrected in commits 92f40b4 & 6a6c367 by adding trait bound `T: Send` to `Send` impls for `PinSlab<T>` & `Unordered<T, S>` and adding `T: Sync` to `Sync` impls for `PinSlab<T>` & `Unordered<T, S>`.", "methods": ["Data races in concurrent access to non-Sync types in PinSlab<T> and Unordered<T, S>.", "Memory corruption due to concurrent access to non-Sync types in PinSlab<T> and Unordered<T, S>.", "Lack of synchronization in PinSlab<T> and Unordered<T, S> implementations."]}