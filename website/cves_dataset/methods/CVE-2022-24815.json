{"description": "### Impact\nSQL Injection vulnerability in entities for applications generated with the option \"reactive with Spring WebFlux\" enabled and an SQL database using r2dbc. Applications created without \"reactive with Spring WebFlux\" and applications with NoSQL databases are not affected. \n\nIf you have generated a microservice Gateway using the affected version, you might be impacted as Gateways are reactive by default.\n\nCurrently, SQL injection is possible in the `findAllBy(Pageable pageable, Criteria criteria)` method of an entity repository class generated in these applications as the where clause using Criteria for queries are not sanitized and user input is passed on as it is by the criteria.\n\n## Impacted applications\n- Monolith and microservice applications with SQL database and reactive with Spring WebFlux combination (other combinations are not affected and the issue is only present when you generate entities)\n- Gateway applications with SQL database (issue will appear only when generating entities)\n\n### Patches\nPatched in v7.8.1\n\nThe `findAllBy(Pageable pageable, Criteria criteria)` method has been removed from the entity repositories and `org.springframework.data.relational.core.query.Criteria` support in the underlying methods has been replaced with `org.springframework.data.relational.core.sql.Condition`. This means you won't be able to do custom filtering in the generated applications.\n\nIf you have existing reactive applications generated by the impacted version, we advise you to audit for use of `Criteria` and take appropriate actions.\n\n### Workarounds\n\nThe problem lies in the `EntityManager.java` class when creating the where clause via `Conditions.just(criteria.toString())`.\n\n`just` accepts the literal string provided. Criteria's `toString` method returns a plain string and this combination is vulnerable to sql injection as the string is not sanitized and will contain whatever used passed as input using any plain SQL\n\nSo be careful when combining criterias and conditions. As a workaround we have removed the possibility to pass any user-provided criteria to the `createSelect` method of `EntityManager`.\n\n### Example \n\n```java\nCriteria criteria = Criteria.where(\"name\").is(\"foobar';DROP TABLE example;--\"); // parameter is user provided input\ncriteria.toString(); // --> \"'foobar';DROP TABLE example;--'\"\n```\n\n### References\n[More details in this Issue report](https://github.com/jhipster/generator-jhipster/issues/18269)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [JHipster issue tracker](https://github.com/jhipster/generator-jhipster/issues)\n", "methods": ["Used SQL Injection when creating an application with Reactive SQL backend.", "Used unsanitized user input in the `Criteria` class to create a SQL injection vulnerability.", "Used `Criteria.where()` to create a SQL query with user-provided input.", "Used `Criteria.toString()` to create a plain string that is not sanitized, allowing SQL injection.", "Used `createSelect` method of `EntityManager` to create a SQL query with user-provided input."]}