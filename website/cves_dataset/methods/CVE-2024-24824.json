{"description": "### Summary\n\nArbitrary classes can be loaded and instantiated using a HTTP PUT request to the `/api/system/cluster_config/` endpoint.\n\n### Details\n\nGraylog's cluster config system uses fully qualified class names as config keys. To validate the existence of the requested class before using them, Graylog loads the class using the class loader. \n\nhttps://github.com/Graylog2/graylog2-server/blob/e458db8bf4f789d4d19f1b37f0263f910c8d036c/graylog2-server/src/main/java/org/graylog2/rest/resources/system/ClusterConfigResource.java#L208-L214\n\n\n### PoC\nA request of the following form will output the content of the `/etc/passwd` file:\n\n```\ncurl -u admin:<admin-password> -X PUT http://localhost:9000/api/system/cluster_config/java.io.File \\\n    -H \"Content-Type: application/json\" \\\n    -H \"X-Requested-By: poc\" \\\n    -d '\"/etc/passwd\"'\n```\n\nTo perform the request, authorization is required. Only users posessing the `clusterconfigentry:create` and `clusterconfigentry:edit` permissions are allowed to do so. These permissions are usually only granted to `Admin` users.\n\n### Impact\n\nIf a user with the appropriate permissions performs the request, arbitrary classes with 1-arg String constructors can be instantiated. \n\nThis will execute arbitrary code that is run during class instantiation.\n\nIn the specific use case of `java.io.File`, the behaviour of the internal web-server stack will lead to information exposure by including the entire file content in the response to the REST request.\n\n### Credits\n\nAnalysis provided by Fabian Yamaguchi - Whirly Labs (Pty) Ltd", "methods": ["Used a HTTP PUT request to the `/api/system/cluster_config/` endpoint to load and instantiate arbitrary classes.", "Loaded classes using the class loader to validate the existence of the requested class.", "Used a request of the form `curl -u admin:<admin-password> -X PUT http://localhost:9000/api/system/cluster_config/java.io.File` to output the content of the `/etc/passwd` file.", "Required authorization to perform the request, with only users possessing the `clusterconfigentry:create` and `clusterconfigentry:edit` permissions allowed to do so.", "Executed arbitrary code that is run during class instantiation.", "Used the `java.io.File` class to execute arbitrary code that leads to information exposure by including the entire file content in the response to the REST request."]}