{"description": "### Impact\n\n**directly impacted:**\n\n- `graphql-playground-html@<1.6.22` - all unsanitized user input for `renderPlaygroundPage()`\n\n**all of our consuming packages** of `graphql-playground-html` are impacted:\n\n- `graphql-playground-middleware-express@<1.7.16` - unsanitized user input to `expressPlayground()`\n- `graphql-playground-middleware-koa@<1.6.15` - unsanitized user input to `koaPlayground()`\n- `graphql-playground-middleware-lambda@<1.7.17` - unsanitized user input to `lambdaPlayground()`\n- `graphql-playground-middleware-hapi@<1.6.13` - unsanitized user input to `hapiPlayground()`\n\nas well as ***any other packages*** that use these methods with unsanitized user input.\n\n**not impacted:**\n\n- `graphql-playground-electron` - uses `renderPlaygroundPage()` statically for a webpack build for electron bundle, no dynamic user input\n- `graphql-playground-react` - usage of the component directly in a react application does not expose reflected XSS vulnerabilities. only the demo in `public/` contains the vulnerability, because it uses an old version of the html pacakge.\n\n### Patches\n\nupgrading to the above mentioned versions will solve the issue.\n\nIf you're using `graphql-playground-html` directly, then:\n\n```\nyarn add graphql-playground-html@^1.6.22\n```\n\nor\n\n```\nnpm install --save graphql-playground-html@^1.6.22\n```\n\nThen, similar steps need to be taken for each middleware:\n\n- [Upgrade Express Middleware](https://www.npmjs.com/package/graphql-playground-middleware-express#security-upgrade-steps)\n- [Upgrade Koa Middleware](https://www.npmjs.com/package/graphql-playground-middleware-koa#security-upgrade-steps)\n- [Upgrade Lambda Middleware](https://www.npmjs.com/package/graphql-playground-middleware-lambda#security-upgrade-steps)\n- [Upgrade Hapi Middleware](https://www.npmjs.com/package/graphql-playground-middleware-hapi#security-upgrade-steps)\n\n### Workarounds\n\nEnsure you properly sanitize *all* user input for options you use for whatever function to initialize GraphQLPlayground:\n\nfor example, with `graphql-playground-html` and express:\n\n```js\nconst { sanitizeUrl } = require('@braintree/sanitize-url');\n\nconst qs = require('querystringify');\n\nconst { renderPlaygroundPage } = require('graphql-playground-html');\n\nmodule.exports = (req, res, next) => {\n\tconst { endpoint } = qs.parse(req.url)\n\tres.html(renderPlaygroundPage({endpoint: sanitizeUrl(endpoint) })).status(200)\n\tnext()\n}\n```\n\nor, with `graphql-playground-express`:\n\n```js\nconst { expressPlayground } = require('graphql-playground-middleware-express');\nconst { sanitizeUrl } = require('@braintree/sanitize-url');\n\nconst qs = require('querystringify');\n\nconst { renderPlaygroundPage } = require('graphql-playground-html');\n\nmodule.exports = (req, res, next) => {\n\tconst { endpoint } = qs.parse(req.url)\n\tres.html(expressPlayground({endpoint: sanitizeUrl(endpoint) })).status(200)\n\tnext()\n}\n```\n\n### References\n\n- [OWASP: How to Test for CSS Reflection Attacks](https://github.com/OWASP/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.md)\n- [Original Report from Cure53](https://user-images.githubusercontent.com/1368727/84191028-dfb7b980-aa65-11ea-8e18-4b8706f538e2.jpg) (jpg)\n\n\n### Credits\n\nMasato Kinugawa of Cure53\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [graphql-playground](https://github.com/prisma-labs/graphql-playground/issues/new/choose)\n* Email us at [rikki.schulte@gmail.com](mailto:rikki.schulte@gmail.com)\n", "methods": ["Used reflected XSS in GraphQL Playground.", "Sent malicious input to `renderPlaygroundPage()`, `expressPlayground()`, `koaPlayground()`, `lambdaPlayground()`, and `hapiPlayground()`.", "Used unsanitized user input for `renderPlaygroundPage()`, `expressPlayground()`, `koaPlayground()`, `lambdaPlayground()`, and `hapiPlayground()`.", "Failed to sanitize user input for options used to initialize GraphQLPlayground.", "Used `sanitizeUrl()` to sanitize user input for `endpoint` parameter.", "Used `querystringify()` to parse user input from `req.url`."]}