{"description": "### Summary\n\nA stored XSS vulnerability in Excalidraw's web embeddable component. This allows arbitrary JavaScript to be run in the context of the domain where the editor is hosted. \n\n### Poc\n\nInserting an embed with the below url (can be copy/pasted onto canvas to insert as embed) will log `42` to the console:\n\n```\nhttps://gist.github.com/vv=v<script>console.log(42)</script>\n```\n\n### Details\n\nThere were two vectors. One rendering untrusted string as iframe's `srcdoc` without properly sanitizing against HTML injection. Second by improperly sanitizing against attribute HTML injection. This in conjunction with allowing `allow-same-origin` sandbox flag (necessary for several embeds) resulted in the XSS.\n\nFormer was fixed by no longer rendering unsafe `srcdoc` content verbatim, and instead strictly parsing the supplied content and constructing the `srcdoc` manually. The latter by sanitizing properly.\n\nThe `allow-same-origin` flag is now also set only in cases that require it, following the principle of least privilege.\n\n### Impact\n\nThis is a cross site scripting vulnerability, for more information, please see: https://portswigger.net/web-security/cross-site-scripting\n\nTwo npm `@excalidraw/excalidraw` stable version releases were affected (`0.16.x`, `0.17.x`), and both are now patched.", "methods": ["Used a stored XSS vulnerability in Excalidraw's web embed component.", "Rendered untrusted string as iframe's srcdoc without properly sanitizing against HTML injection.", "Improperly sanitized against attribute HTML injection.", "Allowed 'allow-same-origin' sandbox flag without necessity.", "Failed to strictly parse and construct iframe's srcdoc manually.", "Failed to sanitize user input properly."]}