{"description": "Pagefind initializes its dynamic JavaScript and WebAssembly files relative to the location of the first script you load. This information is gathered by looking up the value of `document.currentScript.src`.\n\nIt is possible to \"clobber\" this lookup with otherwise benign HTML on the page, for example:\n```html\n<img name=\"currentScript\" src=\"blob:https://xxx.xxx.xxx/ui.js\"></img>\n```\n\nThis will cause `document.currentScript.src` to resolve as an external domain, which will then be used by Pagefind to load dependencies.\n\nThis exploit would only work in the case that an attacker could inject HTML to your live, hosted, website. In these cases, this would act as a way to escalate the privilege available to an attacker. This assumes they have the ability to add some elements to the page (for example, `img` tags with a `name` attribute), but not others, as adding a `script` to the page would itself be the XSS vector.\n\nPagefind has tightened this resolution by ensuring the source is loaded from a valid script element. There are no reports of this being exploited in the wild via Pagefind.\n\n### Original Report\n\nIf an attacker can inject benign html, such as:\n`<img name=\"currentScript\" src=\"blob:https://xxx.xxx.xxx/ui.js\"></img>`\n\nthey can clobber `document.currentScript.src` leading to XSS in your library.\n\nHere is the same attack on webpack that was accepted: https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986", "methods": ["Injects benign HTML to clobber `document.currentScript.src` to escalate privilege.", "Uses `blob:https` protocol to load external domain as `document.currentScript.src`.", "Escalates privilege available to an attacker by injecting HTML to a live, hosted website.", "Uses `img` tags with a `name` attribute to inject HTML.", "Uses `script` element to load dependencies from an external domain."]}