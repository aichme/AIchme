{"description": "### Summary\n\nIdTokenClaimsValidator skips `aud` claim validation if token is issued by same identity issuer/provider.\n\n### Details\n\nSee https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\n\nThis logic violates point 3 of https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation. \n\nWorkaround exists by setting `micronaut.security.token.jwt.claims-validators.audience` with valid values. \n `micronaut.security.token.jwt.claims-validators.openid-idtoken` can be kept as default on.\n\n### PoC\n\nShould probably be:\n\n```java\n                return issuer.equalsIgnoreCase(iss) &&\n                        audiences.contains(clientId) &&\n                                validateAzp(claims, clientId, audiences);\n```\n\n### Impact\n\nAny OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.\n\n\n### Mitigation\n\nPlease upgrade to a patched `micronaut-security-oauth2` release as soon as possible.  \n\nIf you cannot upgrade, for example, if you are still using Micronaut Framework 2, you can patch your application by creating a replacement of `IdTokenClaimsValidatorReplacement`\n\n```java\npackage cve;\n\nimport io.micronaut.context.annotation.Replaces;\nimport io.micronaut.context.annotation.Requires;\nimport io.micronaut.core.annotation.NonNull;\nimport io.micronaut.core.util.StringUtils;\nimport io.micronaut.security.config.SecurityConfigurationProperties;\nimport io.micronaut.security.oauth2.client.IdTokenClaimsValidator;\nimport io.micronaut.security.oauth2.configuration.OauthClientConfiguration;\nimport io.micronaut.security.oauth2.configuration.OpenIdClientConfiguration;\nimport io.micronaut.security.token.jwt.generator.claims.JwtClaims;\nimport io.micronaut.security.token.jwt.validator.JwtClaimsValidatorConfigurationProperties;\n\nimport javax.inject.Singleton;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Optional;\n\n@Requires(property = SecurityConfigurationProperties.PREFIX + \".authentication\", value = \"idtoken\")\n@Requires(property = JwtClaimsValidatorConfigurationProperties.PREFIX + \".openid-idtoken\", notEquals = StringUtils.FALSE)\n@Singleton\n@Replaces(IdTokenClaimsValidator.class)\npublic class IdTokenClaimsValidatorReplacement extends IdTokenClaimsValidator {\n    public IdTokenClaimsValidatorReplacement(Collection<OauthClientConfiguration> oauthClientConfigurations) {\n        super(oauthClientConfigurations);\n    }\n\n    @Override\n    protected boolean validateIssuerAudienceAndAzp(@NonNull JwtClaims claims,\n                                                   @NonNull String iss,\n                                                   @NonNull List<String> audiences,\n                                                   @NonNull String clientId,\n                                                   @NonNull OpenIdClientConfiguration openIdClientConfiguration) {\n        if (openIdClientConfiguration.getIssuer().isPresent()) {\n            Optional<URL> issuerOptional = openIdClientConfiguration.getIssuer();\n            if (issuerOptional.isPresent()) {\n                String issuer = issuerOptional.get().toString();\n                return issuer.equalsIgnoreCase(iss) &&\n                        audiences.contains(clientId) &&\n                                validateAzp(claims, clientId, audiences);\n            }\n        }\n        return false;\n    }\n}\n``", "methods": ["Used a vulnerable library (micronaut-security-oauth2) with a known vulnerability.", "Skipped validation of the \"aud\" claim in the IdTokenClaimsValidator logic.", "Failed to follow the OpenID Connect specification for token validation.", "Used a workaround by setting \"micronaut.security.token.jwt.claims-validators.audience\" with valid values.", "Created a replacement class (IdTokenClaimsValidatorReplacement) to patch the vulnerability."]}