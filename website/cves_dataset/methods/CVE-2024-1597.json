{"description": "# Impact\nSQL injection is possible when using the non-default connection property `preferQueryMode=simple` in combination with application code that has a vulnerable SQL that negates a parameter value.\n\nThere is no vulnerability in the driver when using the default query mode. Users that do not override the query mode are not impacted.\n\n# Exploitation\n\nTo exploit this behavior the following conditions must be met:\n\n1. A placeholder for a numeric value must be immediately preceded by a minus (i.e. `-`)\n1. There must be a second placeholder for a string value after the first placeholder on the same line. \n1. Both parameters must be user controlled.\n\nThe prior behavior of the driver when operating in simple query mode would inline the negative value of the first parameter and cause the resulting line to be treated as a `--` SQL comment. That would extend to the beginning of the next parameter and cause the quoting of that parameter to be consumed by the comment line. If that string parameter includes a newline, the resulting text would appear unescaped in the resulting SQL.\n\nWhen operating in the default extended query mode this would not be an issue as the parameter values are sent separately to the server. Only in simple query mode the parameter values are inlined into the executed SQL causing this issue.\n\n# Example\n\n```java\nPreparedStatement stmt = conn.prepareStatement(\"SELECT -?, ?\");\nstmt.setInt(1, -1);\nstmt.setString(2, \"\\nWHERE false --\");\nResultSet rs = stmt.executeQuery();\n```\n\nThe resulting SQL when operating in simple query mode would be:\n\n```sql\nSELECT --1,'\nWHERE false --'\n```\n\nThe contents of the second parameter get injected into the command. Note how both the number of result columns and the WHERE clause of the command have changed. A more elaborate example could execute arbitrary other SQL commands.\n\n# Patch\nProblem will be patched upgrade to 42.7.2, 42.6.1, 42.5.5, 42.4.4, 42.3.9, 42.2.28, 42.2.28.jre7\n\nThe patch fixes the inlining of parameters by forcing them all to be serialized as wrapped literals. The SQL in the prior example would be transformed into:\n\n```sql\nSELECT -('-1'::int4), ('\nWHERE false --')\n```\n\n# Workarounds\nDo not use the connection property`preferQueryMode=simple`. (*NOTE: If you do not explicitly specify a query mode then you are using the default of `extended` and are not impacted by this issue.*)", "methods": ["Used SQL injection via line comment generation when using the non-default connection property `preferQueryMode=simple` in combination with application code that has a vulnerable SQL that negates a parameter value.", "Exploited a vulnerability in the PostgreSQL driver by meeting the following conditions:", "Injected malicious SQL by inlining parameter values into the executed SQL, causing the resulting SQL to be treated as a `--` SQL comment."]}