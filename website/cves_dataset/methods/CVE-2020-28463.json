{"description": "All versions of package reportlab at time of writing are vulnerable to Server-side Request Forgery (SSRF) via img tags. In order to reduce risk, use trustedSchemes & trustedHosts (see in Reportlab's documentation) \n\nSteps to reproduce by Karan Bamal: \n1. Download and install the latest package of reportlab \n2. Go to demos -> odyssey -> dodyssey \n3. In the text file odyssey.txt that needs to be converted to pdf inject `<img src=\"http://127.0.0.1:5000\" valign=\"top\"/>`\n4. Create a nc listener `nc -lp 5000`\n5. Run python3 dodyssey.py \n6. You will get a hit on your nc showing we have successfully proceded to send a server side request \n7. dodyssey.py will show error since there is no img file on the url, but we are able to do SSRF", "methods": ["Used Server-side Request Forgery (SSRF) via img tags in reportlab.", "Injected malicious code into a text file (odyssey.txt) to exploit SSRF.", "Created a network listener (nc -lp 5000) to capture the SSRF request.", "Used a Python script (dodyssey.py) to trigger the SSRF vulnerability."]}