{"description": "PyGreSQL 3.8 did not use PostgreSQL\u2019s safe `string` and `bytea` functions in its own escaping functions. As a result, applications written to use PyGreSQL\u2019s escaping functions are vulnerable to SQL injections when processing certain multi-byte character sequences. Because the safe functions require a database connection, to maintain backwards compatibility, `pg.escape_string()` and `pg.escape_bytea()` are still available, but applications will have to be adjusted to use the new `pyobj.escape_string()` and `pyobj.escape_bytea()` functions. For example, code containing:\n\n```python\nimport pg\nconnection = pg.connect(...)\nescaped = pg.escape_string(untrusted_input)\n```\nshould be adjusted to use:\n\n```python\nimport pg\nconnection = pg.connect(...)\nescaped = connection.escape_string(untrusted_input)\n```", "methods": ["Uses encoding-based SQL injection to inject malicious SQL code.", "Uses PostgreSQL's `string` and `bytea` functions to process untrusted input.", "Fails to use safe functions to escape untrusted input.", "Requires database connection to use safe escaping functions.", "Uses `pg.escape_string()` and `pg.escape_bytea()` functions, which are deprecated.", "Uses `pyobj.escape_string()` and `pyobj.escape_bytea()` functions, which are recommended."]}