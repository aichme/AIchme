{"description": "Affected versions of this crate entered a corrupted state if mem::size_of::<T>() % allocation_granularity() != 0 and a specific allocation pattern was used: sufficiently shifting the deque elements over the mirrored page boundary.\n\nThis allows an attacker that controls controls both element insertion and removal to corrupt the deque, such that reading elements from it would read bytes corresponding to other elements in the deque. (e.g. a read of T could read some bytes from one value and some bytes from an adjacent one, resulting in a T whose value representation is not meaningful). This is undefined behavior.\n\nThe flaw was corrected by using a pair of pointers to track the head and tail of the deque instead of a pair of indices. This pair of pointers are represented using a Rust slice.", "methods": ["Used out-of-bounds write to corrupt a data structure.", "Exploited a memory corruption vulnerability to read arbitrary bytes.", "Used a specific allocation pattern to trigger the vulnerability.", "Manipulated memory to read bytes from adjacent elements.", "Exploited undefined behavior to achieve a desired outcome."]}