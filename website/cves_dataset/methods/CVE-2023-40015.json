{"description": "### Impact\n\nFor the following (probably non-exhaustive) list of expressions, the compiler evaluates the arguments from right to left instead of left to right.\n\n```\n- unsafe_add\n- unsafe_sub\n- unsafe_mul\n- unsafe_div\n- pow_mod256\n- |, &, ^ (bitwise operators)\n- bitwise_or (deprecated)\n- bitwise_and (deprecated)\n- bitwise_xor (deprecated)\n- raw_call\n- <, >, <=, >=, ==, !=\n- in, not in (when lhs and rhs are enums)\n```\n\nThis behaviour becomes a problem when the evaluation of one of the arguments produces side effects that other arguments depend on. The following expressions can produce side-effect:\n\n- state modifying external call \n- state modifying internal call\n- `raw_call`\n- `pop()` when used on a Dynamic Array stored in the storage\n- `create_minimal_proxy_to`\n- `create_copy_of`\n- `create_from_blueprint`\n\nFor example:\n\n```Vyper\nf:uint256\n\n@internal\ndef side_effect() -> uint256:\n    self.f = 12\n    return 1\n\n@external\ndef foo() -> uint256:\n    return unsafe_add(self.f,self.side_effect()) # returns 13 instead of 1\n```\n\n```Vyper\na:DynArray[uint256, 12]\n@external\ndef bar() -> bool:\n    self.a = [1,2,3]\n    return len(self.a) == self.a.pop() # return false instead of true\n```\n\n### Patches\nnot yet patched, will address in a future release. tracking in https://github.com/vyperlang/vyper/issues/3604.\n\n### Workarounds\n\nWhen using expressions from the list above, make sure that the arguments of the expression do not produce side effects or, if one does, that no other argument is dependent on those side effects.\n\n### References\n_Are there any links users can visit to find out more?_\n", "methods": ["Uses reversed order of side effects for some operations, such as `unsafe_add`, `unsafe_sub`, `unsafe_mul`, `unsafe_div`, `pow_mod256`, bitwise operators, and `raw_call`, which can lead to unexpected behavior when evaluating arguments from right to left instead of left to right.", "Uses state modifying external calls, internal calls, `raw_call`, `pop()` on Dynamic Arrays, `create_minimal_proxy_to`, `create_copy_of`, and `create_from_blueprint` to produce side effects that other arguments depend on.", "Uses expressions that can produce side effects, such as `state modifying external call`, `state modifying internal call`, and `raw_call`, without ensuring that arguments do not produce side effects or that no other argument is dependent on those side effects."]}