{"description": "### Impact\n\nFrontier's `modexp` precompile uses `num-bigint` crate under the hood. [In the implementation](https://github.com/rust-num/num-bigint/blob/6f2b8e0fc218dbd0f49bebb8db2d1a771fe6bafa/src/biguint/power.rs#L134), the cases for modulus being even and modulus being odd are treated separately. Odd modulus uses the fast Montgomery multiplication, and even modulus uses the slow plain power algorithm. This gas cost discrepancy was not accounted for in the `modexp` precompile, leading to possible denial of service attacks.\n\n### Patches\n\nNo fixes for `num-bigint` is currently available, and thus this advisory will be first fixed in the short term by raising the gas costs for even modulus, and in the long term fixing it in `num-bigint` or switching to another modexp implementation.\n\nThe short-term fix for Frontier is deployed at [PR 1017](https://github.com/paritytech/frontier/pull/1017).\n\nThe recommendations are as follows:\n\n- If you anticipate malicious validators, it's recommended to issue an emergency runtime upgrade as soon as possible.\n- If you do not anticipate malicious validators, it's recommended to issue a normal runtime upgrade, as Substrate has builtin timeout protection when validators are building blocks.\n\n### Workarounds\n\nNone.\n\n### References\n\nA similar issue was presented in Geth's implementation and the fix can be found [here](https://go-review.googlesource.com/c/go/+/420897).\n", "methods": ["Used a vulnerability in the `num-bigint` crate to cause a denial of service attack.", "Exploited a gas cost discrepancy in the `modexp` precompile.", "Used a slow algorithm for even modulus in the `modexp` precompile.", "Failed to account for the gas cost of the slow algorithm in the `modexp` precompile.", "Used a similar issue in Geth's implementation as a reference."]}