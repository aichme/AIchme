{"description": "### Impact\n\n`next-auth` applications prior to version **4.24.5** that rely on the default [Middleware authorization](https://next-auth.js.org/configuration/nextjs#middleware) are affected.\n\nA bad actor could create an empty/mock user, by getting hold of a NextAuth.js-issued JWT from an interrupted OAuth sign-in flow (state, PKCE or nonce).\n\nManually overriding the `next-auth.session-token` cookie value with this non-related JWT would let the user simulate a logged in user, albeit having no user information associated with it. (The only property on this user is an opaque randomly generated string).\n\nThis vulnerability does **not** give access to other users' data, neither to resources that require proper authorization via scopes or other means. The created mock user has no information associated with it (ie. no name, email, access_token, etc.)\n\nThis vulnerability can be exploited by bad actors to peek at logged in user states (e.g. dashboard layout).\n\n_Note: Regardless of the vulnerability, the existence of a NextAuth.js session state can provide simple authentication, but not authorization in your applications. For role-based access control, you can check out [our guide](https://authjs.dev/guides/basics/role-based-access-control)._\n\n### Patches\n\nWe patched the vulnerability in `next-auth` `v4.24.5`. To upgrade, run one of the following:\n\n```\nnpm i next-auth@latest\n```\n```\nyarn add next-auth@latest\n```\n```\npnpm add next-auth@latest\n```\n\n### Workarounds\n\nUpgrading to `latest` is the recommended way to fix this issue. However, using [a custom authorization callback for Middleware](https://next-auth.js.org/configuration/nextjs#advanced-usage), developers can manually do a basic authentication:\n\n```ts\n// middleware.ts\nimport { withAuth } from \"next-auth/middleware\"\n\nexport default withAuth(/*your middleware function*/, {\n  // checking the existence of any property - besides `value` which might be a random string - on the `token` object is sufficient to prevent this vulnerability\n  callbacks: { authorized: ({ token }) => !!token?.email }\n})\n```\n\n### References\n\n- [NextAuth.js Middleware](https://next-auth.js.org/configuration/nextjs#middleware)\n- [Role-based access contorl (RBAC) guide](https://authjs.dev/guides/basics/role-based-access-control)", "methods": ["Used a vulnerability in NextAuth.js to create a mock user by overriding the `next-auth.session-token` cookie value with a non-related JWT.", "Exploited the vulnerability to peek at logged in user states (e.g. dashboard layout).", "Used a custom authorization callback for Middleware to manually do a basic authentication.", "Checked the existence of any property (besides `value`) on the `token` object to prevent the vulnerability."]}