{"description": "### Summary\n`nuxt-api-party` allows developers to proxy requests to an API without exposing credentials to the client. [A previous vulnerability](https://huntr.dev/bounties/4c57a3f6-0d0e-4431-9494-4a1e7b062fbf/) allowed an attacker to change the baseURL of the request, potentially leading to credentials being leaked or SSRF. \n\nThis vulnerability is similar, and was caused by a recent change to the detection of absolute URLs, which is no longer sufficient to prevent SSRF. \n\n### Details\n`nuxt-api-party` attempts to check if the user has passed an absolute URL to prevent the aforementioned attack. This has been recently changed to [use a regular expression](https://github.com/johannschopplich/nuxt-api-party/blob/777462e1e3af1d9f8938aa33f230cd8cb6e0cc9a/src/runtime/server/handler.ts#L31) `^https?://`.\n\nThis regular expression can be bypassed by an absolute URL with leading whitespace. For example `\\nhttps://whatever.com` has a leading newline. \n\nAccording to the fetch specification, before a fetch is made the URL is normalized. \"To normalize a [byte sequence](https://infra.spec.whatwg.org/#byte-sequence) potentialValue, remove any leading and trailing [HTTP whitespace bytes](https://fetch.spec.whatwg.org/#http-whitespace-byte) from potentialValue.\" ([source](https://fetch.spec.whatwg.org/))\n\nThis means the final request will be normalized to `https://whatever.com`. We have bypassed the check and `nuxt-api-party` will send a request outside of the whitelist. \n\nThis could allow us to leak credentials or perform SSRF.\n\n### PoC\nPOC using Node.\n\n```js\nawait fetch(\"/api/__api_party/MyEndpoint\", {\n    method: \"POST\",\n    body: JSON.stringify({ path: \"\\nhttps://google.com\" }),\n    headers: { \"Content-Type\": \"application/json\" }\n})\n```\n\nWe can use `__proto__` as a substitute for the endpoint if it is not known. This will not leak any credentials as all attributes on `endpoint` will be undefined.\n```js\nawait fetch(\"/api/__api_party/__proto__\", {\n    method: \"POST\",\n    body: JSON.stringify({ path: \"\\nhttps://google.com\" }),\n    headers: { \"Content-Type\": \"application/json\" }\n})\n```\n\n### Impact\nLeak of sensitive API credentials. SSRF.\n\n\n### Fix\nRevert to the previous method of detecting absolute URLs.\n```js\n  if (new URL(path, 'http://localhost').origin !== 'http://localhost') {\n      // ...\n  }\n```\n", "methods": ["Used SSRF to leak sensitive API credentials.", "Used SSRF to perform unauthorized requests.", "Used credentials leak to obtain sensitive information.", "Used a regular expression bypass to evade detection.", "Used leading whitespace to bypass URL normalization.", "Used `__proto__` as a substitute for the endpoint.", "Used `fetch` to send requests to unauthorized APIs.", "Used `JSON.stringify` to send malicious data.", "Used `Content-Type: application/json` to evade detection."]}