{"description": "### Impact\nin the following code, the return of `<iface>.returns_int128()` is not validated to fall within the bounds of `int128`. as of v0.3.0, `<iface>.returns_int128()` is validated in simple expressions, but not complex expressions.\n```vyper\ninterface iface:\n    def returns_int128() -> int128: view\n    def returns_Bytes33() -> Bytes[33]: view\n\nx: iface\n \n@external\ndef call_out():\n    x: int128 = self.x.returns_int128()  # affected, <0.3.0\n    y: uint256 = convert(self.x.returns_int128(), uint256)  # affected, <0.3.2\n    z: Bytes[33] = concat(self.x.returns_Bytes33(), b\"\")  # affected >= 0.3.0, <0.3.2\n```\n\n### Patches\n0.3.2 (as of https://github.com/vyperlang/vyper/commit/049dbdc647b2ce838fae7c188e6bb09cf16e470b)\n\n### Workarounds\nBreak up operations involving external calls into multiple statements. For instance, instead of the example above, use\n```\nx: int128 = self.x.returns_int128()\ny: uint256 = convert(x, uint256)\n```", "methods": ["Integer overflow in Vyper code.", "Lack of input validation in Vyper code.", "Use of unvalidated external calls in Vyper code.", "Use of unvalidated return values in Vyper code.", "Use of unvalidated data in Vyper code.", "Use of complex expressions in Vyper code.", "Use of external calls in Vyper code."]}