{"description": "### Impact\nTurboBoost Commands has existing protections in place to guarantee that only public methods on Command classes can be invoked; however, the existing checks aren't as robust as they should be. It's possible for a sophisticated attacker to invoke more methods than should be permitted depending on the the strictness of authorization checks that individual applications enforce. Being able to call some of these methods can have security implications.\n\n#### Details\nCommands verify that the class must be a `Command` and that the method requested is defined as a public method; however, this isn't robust enough to guard against all unwanted code execution. The library should more strictly enforce which methods are considered safe before allowing them to be executed.  \n\n### Patches\nPatched in the following versions.\n- 0.1.3\n  - [NPM Package](https://www.npmjs.com/package/@turbo-boost/commands/v/0.1.3)\n  - [Ruby GEM](https://rubygems.org/gems/turbo_boost-commands/versions/0.1.3)\n- 0.2.2\n  - [NPM Package](https://www.npmjs.com/package/@turbo-boost/commands/v/0.2.2)\n  - [Ruby GEM](https://rubygems.org/gems/turbo_boost-commands/versions/0.2.2)\n\n\n### Workarounds\nYou can add this guard to mitigate the issue if running an unpatched version of the library.\n\n```ruby\nclass ApplicationCommand < TurboBoost::Commands::Command\n  before_command do\n    method_name = params[:name].include?(\"#\") ? params[:name].split(\"#\").last : :perform\n    ancestors = self.class.ancestors[0..self.class.ancestors.index(TurboBoost::Commands::Command) - 1]\n    allowed = ancestors.any? { |a| a.public_instance_methods(false).any? method_name.to_sym }\n    throw :abort unless allowed # \u2190 blocks invocation\n    # raise \"Invalid Command\" unless allowed # \u2190 blocks invocation\n  end\nend\n```\n", "methods": ["Allows arbitrary method invocation on Command classes.", "Fails to strictly enforce authorization checks for method execution.", "Allows execution of methods that are not public.", "Fails to prevent unwanted code execution."]}