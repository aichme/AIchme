{"description": "### Summary\nAnyone (Strapi developers, users, plugins) can make every attribute of a Content-Type public without knowing it.\n\n### Details\nWhen dealing with content-types inside a Strapi instance, we can extend those using the appropriate container:\n```javascript\nstrapi.container.get('content-types').extend(contentTypeUID, (contentType) => newContentType);\n```\nThe vulnerability only affects the handling of content types by Strapi, not the actual content types themselves. Users can use plugins or modify their own content types without realizing that the `privateAttributes` getter is being removed, which can result in any attribute becoming public. This can lead to sensitive information being exposed or the entire system being taken control of by an attacker(having access to password hashes).\n\n### PoC\nExtend any content type on runtime (like in the bootstrap functions) and do a copy of the content-type object.\n```javascript\nstrapi.container.get('content-types').extend(contentTypeUID, (contentType) => {\n  const newCT = { ... contentType, attributes: { ...contentType.attributes, newAttr: {} } };\n  return newCT;\n});\n```\nThis will have as effect to remove the getter and as we rely on it in sanitization, every attributes will be considered as public.\n\n### Impact\nEveryone can be impacted. Depending on how people are using/extending content-types. If the users are mutating the content-type, they will not be affected.\n", "methods": ["Anyone can modify content types without noticing it.", "Users can extend content types using the `extend` method.", "The `privateAttributes` getter is removed, making all attributes public.", "Sensitive information can be exposed or the system taken control of.", "An attacker can access password hashes.", "Users can mutate content types without being affected.", "The vulnerability affects content type handling, not the content types themselves."]}