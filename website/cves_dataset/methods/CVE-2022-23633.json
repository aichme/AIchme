{"description": "### Impact\n\nUnder certain circumstances response bodies will not be closed, for example a [bug in a webserver](https://github.com/puma/puma/pull/2812) or a bug in a Rack middleware.  In the event a response is *not* notified of a `close`, `ActionDispatch::Executor` will not know to reset thread local state for the next request.  This can lead to data being leaked to subsequent requests, especially when interacting with `ActiveSupport::CurrentAttributes`.\n\nUpgrading to the FIXED versions of Rails will ensure mitigation of this issue even in the context of a buggy webserver or middleware implementation.\n\n### Patches\n\nThis has been fixed in Rails 7.0.2.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2.\n\n### Workarounds\n\nUpgrading is highly recommended, but to work around this problem the following middleware can be used:\n\n```ruby\nclass GuardedExecutor < ActionDispatch::Executor\n  def call(env)\n    ensure_completed!\n    super\n  end\n\n  private\n\n    def ensure_completed!\n      @executor.new.complete! if @executor.active?\n    end\nend\n\n# Ensure the guard is inserted before ActionDispatch::Executor\nRails.application.configure do\n  config.middleware.swap ActionDispatch::Executor, GuardedExecutor, executor\nend\n```", "methods": ["Leverages a bug in a webserver or Rack middleware to prevent response bodies from being closed.", "Fails to notify a response of a `close`, allowing data to be leaked to subsequent requests.", "Uses `ActiveSupport::CurrentAttributes` to interact with subsequent requests.", "Uses a buggy webserver or middleware implementation to exploit the vulnerability.", "Uses a middleware implementation to work around the problem.", "Inserts a custom middleware (`GuardedExecutor`) to ensure response bodies are closed.", "Uses a custom middleware to swap out the original `ActionDispatch::Executor`."]}