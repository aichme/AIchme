{"description": "### Summary\nA **stored cross-site scripting (XSS)** vulnerability was found in the **key_value** field of Avo v3.2.3. This vulnerability could allow an attacker to execute arbitrary JavaScript code in the victim's browser.\n\n### Details\nThe value of the key_value is inserted directly into the HTML code. In the current version of Avo (possibly also older versions), the value is not properly sanitized before it is inserted into the HTML code.\n\nThis vulnerability can be exploited by an attacker to inject malicious JavaScript code into the key_value field. When a victim views the page containing the malicious code, the code will be executed in their browser.\n\nIn [avo/fields/common/key_value_component.html.erb]( https://github.com/avo-hq/avo/blob/main/app/components/avo/fields/common/key_value_component.html.erb#L38C21-L38C33) the value is taken in lines **38** and **49** and seems to be interpreted directly as html in lines **44** and **55**.\n\n### PoC\n\n![POC](https://user-images.githubusercontent.com/26570201/295596307-5d4f563e-99c0-4981-a82e-fc42cfd902c5.gif)\n\n\nTo reproduce the vulnerability, follow these steps:\n\n1. Edit an entry with a key_value field.\n2. Enter the following payload into the value field:\n```POC\\\"> <script>alert( 'XSS in key_value' );</script> <strong>Outside-tag</strong```\n3. Save the entry.\n4. Go to the index page and click on the eye icon next to the entry.\n\nThe malicious JavaScript code will be executed and an alert box will be displayed. \n_On the show and edit page the alert seems not to pop up, but the strong tag breaks out of the expected html tag_\n\n### Impact\nThis vulnerability could be used to steal sensitive information from victims that could be used to hijack victims' accounts or redirect them to malicious websites.\n", "methods": ["Injects malicious JavaScript code into the key_value field.", "Uses the key_value field to execute arbitrary JavaScript code in the victim's browser.", "Injects malicious code into the HTML code.", "Uses the key_value field to inject malicious code that is interpreted directly as HTML.", "Uses a payload to exploit the vulnerability, which is executed when the victim views the page containing the malicious code."]}