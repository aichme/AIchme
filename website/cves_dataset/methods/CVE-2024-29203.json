{"description": "### Impact\nA\u00a0[cross-site scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\u00a0vulnerability was discovered in TinyMCE\u2019s content insertion code.  This allowed `iframe` elements containing malicious code to execute when inserted into the editor.  These `iframe` elements are restricted in their permissions by same-origin browser protections, but could still trigger operations such as downloading of malicious assets.\n\n### Fix\nTinyMCE 6.8.1 introduced a new `sandbox_iframes` boolean option which adds the `sandbox=\"\"` attribute to every `iframe` element by default when enabled. This will prevent cross-origin, and in special cases same-origin, XSS by embedded resources in `iframe` elements. From TinyMCE 7.0.0 onwards the default value of this option is `true`.\n\nIn TinyMCE 7.0.0 a new `sandbox_iframes_exclusions` option was also added, allowing a list of domains to be specified that should be excluded from having the\u00a0`sandbox=\"\"`\u00a0attribute applied when the\u00a0`sandbox_iframes`\u00a0option is enabled. By default, this option is set to an array of domains that are provided in embed code by popular websites. To sandbox `iframe` elements from every domain, set this option to `[]`.\n\n### Workarounds\nThe HTTP Content-Security-Policy (CSP) `frame-src` or `object-src` can be configured to restrict or block the loading of unauthorized URLS.  Refer to the [TinyMCE Content Security Policy Guide](https://www.tiny.cloud/docs/tinymce/latest/tinymce-and-csp/).\n\n### References\n- [TinyMCE 6.8.1](https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types)\n- [TinyMCE 7.0.0](https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#sandbox_iframes-editor-option-is-now-defaulted-to-true)\n", "methods": ["Used cross-site scripting (XSS) to execute malicious code in iframes.", "Used iframes to download malicious assets.", "Used iframes to trigger operations despite same-origin browser protections.", "Used HTTP Content-Security-Policy (CSP) to restrict or block loading of unauthorized URLs.", "Used the `sandbox=\"\"` attribute to restrict iframe permissions.", "Used the `sandbox_iframes` option to add the `sandbox=\"\"` attribute to iframes by default.", "Used the `sandbox_iframes_exclusions` option to exclude domains from sandboxing."]}