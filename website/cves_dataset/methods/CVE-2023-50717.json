{"description": "### Summary\n---\nAttacker can upload a html file with malicious content. If user tries to open that file in browser malicious scripts can be executed leading  Stored XSS(Cross-Site Script) attack.\n\n### PoC\n---\nNocoDB was configured using the Release Binary `Noco-macos-arm64`, and nocodb version 0.202.9 (currently the latest version) was used.\nbinary hash infos: md5(164b727f287af56168bc16fba622d0b4) / sha256(43e8e97f4c5f5330613abe071a359f84e4514b7186f92954b678087c37b7832e)\n<img width=\"665\" alt=\"image\" src=\"https://user-images.githubusercontent.com/86613161/287472673-aeb60a02-2080-429f-8583-9f130ab62779.png\">\n\n### 1. Run the binary to start the server and access the arbitrary table dashboard.\n<img width=\"830\" alt=\"image\" src=\"https://user-images.githubusercontent.com/86613161/287472852-98b2286e-ad66-45bf-b503-63780619d775.png\">\n\nHere, used the default `Features` table.\n\n### 2. Click `+` in the table `field header` to add an `attachment` field.\n<img width=\"1173\" alt=\"image\" src=\"https://user-images.githubusercontent.com/86613161/287472936-98a67213-a547-4e71-915c-d2a43300530b.png\">\n\n### 3. Click the `Add File(s)` button to select and upload files.\n\n<img width=\"1132\" alt=\"image\" src=\"https://user-images.githubusercontent.com/86613161/287473041-0801ff39-e48c-4746-8518-be825bfd5533.png\">\n\nHere, `test.html` containing `<script>alert(document.domain)</script>` was uploaded.\n\n### 4. Check the uploaded file path.\n<img width=\"1163\" alt=\"image\" src=\"https://user-images.githubusercontent.com/86613161/287473337-b1c7c781-2fb5-4bd0-b464-dbd3d4158f04.png\"\n\n### 5. Access the uploaded file path.\n<img width=\"1201\" alt=\"image\" src=\"https://user-images.githubusercontent.com/86613161/287473278-410f9228-58e3-4ee4-b111-70cdbffa9ed5.png\">\n\nWhen the file path is accessed, the `<script>alert(document.domain)</script>` script statement contained in the file is executed and the server host appears in the alert message.\n\n\n### Impact\n---\nThis allows remote attacker to execute JavaScript code in the context of the user accessing the vector. An attacker could have used this vulnerability to execute requests in the name of a logged-in user or potentially collect information about the attacked user by displaying a malicious form.\n", "methods": ["Used Stored XSS (Cross-Site Script) attack to execute JavaScript code in the context of the user accessing the vector.", "Executed malicious scripts when user tries to open a malicious html file in the browser.", "Used a malicious html file with a script statement to collect information about the attacked user.", "Used a malicious html file with a script statement to execute requests in the name of a logged-in user."]}