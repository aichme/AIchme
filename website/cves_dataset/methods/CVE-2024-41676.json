{"description": "### Impact\n\nThis XSS vulnerability is about the system configs\n* design/header/welcome\n* design/header/logo_src\n* design/header/logo_src_small\n* design/header/logo_alt\n\nThey are intended to enable admins to set a text in the two cases, and to define an image url for the other two cases.\nBut because of previously missing escaping allowed to input arbitrary html and as a consequence also arbitrary JavaScript.\n\nWhile this is in most usage scenarios not a relevant issue, some people work with more restrictive roles in the backend. Here the ability to inject JavaScript with these settings would be an unintended and unwanted privilege.\n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_  \n\nThe problem is patched with Version 20.10.1 or higher.\n\n### Workarounds\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_  \n\nPossible mitigations are\n* Restricting access to the System Configs \n* checking templates where these settings are used to apply proper html filtering\n\n### For Users relying on this possibility\n\nSome Users might actually rely on the ability to use html there.\nYou can restore the previous behavior by making use of the new introduced `->getUnescapedValue()` method on this escaped elements. Developers should have a look at the newly introduced `Mage_Core_Model_Security_HtmlEscapedString`\n\n### Credit\n\nCredit goes to  Aakash Adhikari @justlife4x4 for finding this issue", "methods": ["Used Cross-site Scripting (XSS) in admin system configs to inject arbitrary JavaScript.", "Injected malicious JavaScript through design/header/welcome, design/header/logo_src, design/header/logo_src_small, and design/header/logo_alt settings.", "Exploited missing escaping in system configs to input arbitrary HTML and JavaScript.", "Used the ability to inject JavaScript to gain unintended and unwanted privilege in the backend."]}