{"description": "This affects versions of the package pydash before 6.0.0. A number of pydash methods such as pydash.objects.invoke() and pydash.collections.invoke_map() accept dotted paths (Deep Path Strings) to target a nested Python object, relative to the original source object. These paths can be used to target internal class attributes and dict items, to retrieve, modify or invoke nested Python objects.\n\n**Note:**\n\nThe pydash.objects.invoke() method is vulnerable to Command Injection when the following prerequisites are satisfied:\n\n1) The source object (argument 1) is not a built-in object such as list/dict (otherwise, the __init__.__globals__ path is not accessible)\n\n2) The attacker has control over argument 2 (the path string) and argument 3 (the argument to pass to the invoked method)\n\n\nThe pydash.collections.invoke_map() method is also vulnerable, but is harder to exploit as the attacker does not have direct control over the argument to be passed to the invoked function.", "methods": ["Command Injection via pydash.objects.invoke() method when the source object is not a built-in object and the attacker has control over the path string and the argument to pass to the invoked method.", "Command Injection via pydash.collections.invoke_map() method, but with limited control over the argument to be passed to the invoked function."]}