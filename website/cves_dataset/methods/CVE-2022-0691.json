{"description": "Leading control characters in a URL are not stripped when passed into url-parse. This can cause input URLs to be mistakenly be interpreted as a relative URL without a hostname and protocol, while the WHATWG URL parser will trim control characters and treat it as an absolute URL.\n\nIf url-parse is used in security decisions involving the hostname / protocol, and the input URL is used in a client which uses the WHATWG URL parser, the decision may be incorrect.\n\nThis can also lead to a cross-site scripting (XSS) vulnerability if url-parse is used to check for the javascript: protocol in URLs. See following example:\n```js\nconst parse = require('url-parse')\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\nurl = parse(\\\"\\\\bjavascript:alert(1)\\\")\n\nconsole.log(url)\n\napp.get('/', (req, res) => {\n if (url.protocol !== \\\"javascript:\\\") {res.send(\\\"<a href=\\\\'\\\" + url.href + \\\"\\\\'>CLICK ME!</a>\\\")}\n })\n\napp.listen(port, () => {\n console.log(`Example app listening on port ${port}`)\n })\n```", "methods": ["Incorrectly parses URLs with leading control characters, potentially leading to XSS vulnerability.", "Uses the WHATWG URL parser to trim control characters and treat the URL as absolute.", "Uses the `url-parse` library in security decisions involving hostname/protocol.", "Uses the `javascript:` protocol in URLs to inject malicious code.", "Uses the `express` framework to create a web server.", "Uses the `app.get()` method to handle HTTP requests.", "Uses the `res.send()` method to send HTTP responses.", "Uses the `console.log()` method to log messages."]}