{"description": "### Impact\n\nPossible consensus split given maliciously-crafted `AttesterSlashing` or `ProposerSlashing` being included on-chain.\n\nSince we represent `uint64` values as native javascript `number`s, there is an issue when those variables with large (greater than 2^53) `uint64` values are included on chain. In those cases, Lodestar may view _valid_ `AttesterSlashing` or `ProposerSlashing` as _invalid_, due to rounding errors in large `number` values. This causes a consensus split, where Lodestar nodes are forked away from the main network.\n\nSimilarly Lodestar may consider _invalid_ `ProposerSlashing` as _valid_, thus including in proposed blocks that will be considered invalid by the network.\n\n### Patches\n\nhttps://github.com/ChainSafe/lodestar/pull/3977\n\n### Workarounds\n\nUse `BigInt` to represent `Slot` and `Epoch` values in `AttesterSlashing` and `ProposerSlashing` objects. `BigInt` is too slow to be used in all `Slot` and `Epoch` cases, so we will carefully use `BigInt` just where necessary for consensus.", "methods": ["Used a vulnerability in `AttesterSlashing` and `ProposerSlashing` to cause a consensus split.", "Used a vulnerability in `uint64` values to cause a consensus split due to rounding errors.", "Used a vulnerability in `number` values to cause a consensus split due to rounding errors.", "Used a vulnerability in `BigInt` values to cause a consensus split due to incorrect handling of large values.", "Used a vulnerability in Lodestar to cause a consensus split."]}