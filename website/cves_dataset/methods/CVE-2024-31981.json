{"description": "### Impact\nRemote code execution is possible via PDF export templates.\nTo reproduce on an installation, register a new user account with username `PDFClass` if `XWiki.PDFClass` does not exist.\nOn `XWiki.PDFClass`, use the class editor to add a \"style\" property of type \"TextArea\" and content type \"Plain Text\".\nThen, add an object of class `PDFClass` and set the \"style\" attribute to `$services.logging.getLogger('PDFClass').error(\"I got programming: $services.security.authorization.hasAccess('programming')\")`.\nFinally, go to `<host>/xwiki/bin/export/Main/WebHome?format=pdf&pdftemplate=XWiki.PDFClass`. If the logs contain \"ERROR PDFClass - I got programming: true\", the instance is vulnerable.\n\n### Patches\nThis vulnerability has been patched in XWiki 14.10.20, 15.5.4 and 15.10-rc-1.\n\n### Workarounds\nIf PDF templates are not typically used on the instance, an administrator can create the document `XWiki.PDFClass` and block its edition, after making sure that it does not contain a `style` attribute.\nOtherwise, the instance needs to be updated.\n\n### References\n- https://jira.xwiki.org/browse/XWIKI-21337\n- https://github.com/xwiki/xwiki-platform/commit/d28e21a670c69880b951e415dd2ddd69d273eae9\n", "methods": ["Used a vulnerability in PDF export templates for remote code execution.", "Used a user registration vulnerability to gain elevated privileges.", "Used a malicious PDF to execute arbitrary code.", "Used a custom class to inject malicious code.", "Used a logging function to test for access rights.", "Used a PDF template to inject malicious code.", "Used a TextArea property to inject malicious code.", "Used a Plain Text content type to inject malicious code.", "Used a custom PDFClass to inject malicious code.", "Used a style attribute to inject malicious code.", "Used a logging error message to test for access rights."]}