{"description": "### Impact\n\nAn editor with write access to the Kirby Panel can upload an SVG or XML file that contains harmful content like `<script>` tags. The direct link to that file can be sent to other users or visitors of the site. If the victim opens that link in a browser where they are logged in to Kirby, the script will run and can for example trigger requests to Kirby's API with the permissions of the victim.\n\nThis vulnerability is critical if you might have potential attackers in your group of authenticated Panel users. They can escalate their privileges if they get access to the Panel session of an admin user. Depending on your site, other JavaScript-powered attacks are possible.\n\nVisitors without Panel access can only use this attack vector if your site allows SVG or XML file uploads in frontend forms and you don't already validate or sanitize uploaded SVG or XML files.\n\nThe attack requires user interaction by another user or visitor and *cannot* be automated.\n\n### Patches\n\n#### Uploads in the Panel\n\nThe problem has been patched in [Kirby 3.5.4](https://github.com/getkirby/kirby/releases/tag/3.5.4) by validating uploaded SVG and XML files and rejecting potentially harmful files. Please update to this or a [later version](https://github.com/getkirby/kirby/releases/) to fix the vulnerability.\n\n#### Frontend upload forms\n\nFrontend upload forms need to be patched separately depending on how they store the uploaded file(s). If you use `File::create()`, you are protected by updating to Kirby 3.5.4+.\n\n#### Validate existing files\n\nAlready uploaded files are *not* automatically validated again. If you are not sure if you have been impacted by this vulnerability in the past, we recommend to run all site files through the validator classes after updating to Kirby 3.5.4. You can use the following test script by pasting it into a template or uploading it to your web root:\n\n```php\n<?php\n\n@include_once __DIR__ . '/kirby/bootstrap.php';\n\nif (version_compare(kirby()->version(), '3.5.4', '<') === true) {\n  die('This script requires Kirby 3.5.4+.');\n}\n\n$objects = [\n  // the site itself\n  site(),\n\n  // all pages and drafts\n  ...site()->index(true)->values(),\n\n  // all users\n  ...kirby()->users()->values()\n];\n\n$errors = false;\nforeach ($objects as $object) {\n  foreach ($object->files() as $file) {\n    try {\n      // validate the contents lazily\n      // (if a validator exists)\n      $file->validateContents(true);\n    } catch (\\Kirby\\Exception\\InvalidArgumentException $e) {\n      echo $file->id() . ': ' . $e->getMessage() . \"<br>\\n\";\n      $errors = true;\n    }\n  }\n}\n\nif ($errors === false) {\n  echo 'No validation errors found.';\n}\n```\n\nYou only need to run this validator script once as future uploads will automatically be validated. If the script prints \"No validation errors found\", you have not been impacted by the vulnerability so far.\n\nErrors that it lists may or may not be critical as our validator classes also catch files with an invalid data structure or less harmful attacks like the [\"billion laughs\" denial-of-service attack](https://en.wikipedia.org/wiki/Billion_laughs_attack) or the usage of external sources. We recommend to review and fix each listed error manually until the script no longer finds any validation errors.\n\n**Please delete the script again after you have used it.**\n\n### Workarounds\n\nIf you cannot update to Kirby 3.5.4, you can disable the upload of SVG and XML files in your [file blueprints](https://getkirby.com/docs/reference/panel/blueprints/file#accept) and validate or replace your already uploaded files once.\n\n### Credits\n\nThanks to @sreenathr10 for reporting the problem.", "methods": ["Used Cross-site scripting (XSS) from unsanitized uploaded SVG files in Kirby.", "Used user interaction by another user or visitor to trigger the attack.", "Used the permissions of the victim to trigger requests to Kirby's API.", "Used the permissions of the victim to escalate privileges if they get access to the Panel session of an admin user.", "Used the \"billion laughs\" denial-of-service attack.", "Used external sources in uploaded files.", "Used frontend upload forms to store uploaded files.", "Used `File::create()` to store uploaded files.", "Used the Kirby Panel to upload SVG or XML files.", "Used the Kirby API to trigger requests.", "Used the Registry to store uploaded files."]}